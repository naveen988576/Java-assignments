lab-1 task

package examples;

public class Account {

	private long accNum;
	private double balance;
	@Override
	public String toString() {
		return "Account [accNum=" + accNum + ", balance=" + balance + ", accHolder=" + accHolder + "]";
	}

	private String accHolder;

	public Account(long accNum, double balance, String accHolder) {
		super();
		this.accNum = accNum;
		this.setBalance(balance);
		this.accHolder = accHolder;
	}

//methods//
	public void Deposit(double x) {
		setBalance(getBalance() + x);
	}

	public void Withdraw(double y) {
		if (getBalance() == 0.0d) {
			System.out.println("Insufficient Funds");
		} else if((getBalance() - y) >= 0) {
			setBalance(getBalance() - y);
		} else {
		
			System.out.println("Insufficient Balance");
		}

	public long getAccNum() {
		return accNum;
	}

	public void setAccNum(long accNum) {
		this.accNum = accNum;
	}

	public double getBalance() {
		return balance;
	}

	public String getAccHolder() {
		return accHolder;
	}

	public void setAccHolder(String accHolder) {
		this.accHolder = accHolder;
	}

	public void setBalance(double balance) {
		this.balance = balance;
	}
}

class person {
	public person(String name, float age) {
		super();
		this.name = name;
		this.age = age;
	}

	private String name;
	private float age;

	// methods//
	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public float getAge() {
		return age;
	}

	public void setAge(float age) {
		this.age = age;
	}
}



package examples;

class SavingsAccount extends Account {
	public SavingsAccount(long accNum, double balance, String accHolder) {
		super(accNum, balance, accHolder);
		// TODO Auto-generated constructor stub
	}

        private final double minbalance = 500;

	public void Withdraw(double y) {
	
		if (getBalance() - y >= minbalance) {
			setBalance(getBalance() - y);
		} else {
			System.out.println("Maintain Minimum Balance Of 500");
		}
	}
}

class CurrentAccount extends Account {

	public CurrentAccount(long accNum, double balance, String accHolder) {
		super(accNum, balance, accHolder);
		// TODO Auto-generated constructor stub
	}

        private double overdraftlimit = -150;

	public void Withdraw(double y) {

		if (getBalance() - y < overdraftlimit) {
			System.out.println("over draft limit exceeded");
		} else {
			setBalance(getBalance() - y);
		}
	}
}

class Banking {
	public static void main(String[] args) {
		person p = new person("raj", 21);
		Account a = new Account(7425,2000,"Smith");
		Account a1= new Account(7426,3000,"Kathy");
		System.out.println(a.getAccNum());
		System.out.println(p.getName());
		a.Deposit(2000);
		a1.Withdraw(2000);
		System.out.println(a.getBalance());
		System.out.println(a1.getBalance());
		SavingsAccount sa = new SavingsAccount(15797, 5000, " hit");
		sa.Withdraw(1000);
		System.out.println(sa.getBalance());
		CurrentAccount ca = new CurrentAccount(45647, 500, "mani");
		System.out.println(ca.getBalance());
		ca.Withdraw(500);
		System.out.println(ca.getBalance());
		ca.Withdraw(500);
		System.out.println(ca.getBalance());
		ca.Withdraw(149);
		System.out.println(ca.getBalance());
		System.out.println(a);
	}
}


lab-2 task
abstract class Item{
private int idNum;
private String title;
private int numCopies;
public Item(){
idNum =0;
title = " ";
numCopies = 0;
}
public Item(int idNum, String title, int numCopies){
idNum = idNum;
title = title;
numCopies = numCopies;
}
public int setidNum(int id){
idNum = id;
return id;
}
public String setTitle(String str){
title = str;
return str;
}
public int setNumCopies(int n){
numCopies = n;
return n;
}
public int getidNum(){
return idNum;
}
public String getTitle(){
return title;
}
public int getCopies(){
return numCopies;
}
public void checkIn(){
numCopies = numCopies + 1;
}
public void checkOut(){
numCopies = numCopies - 1;
}
public void addItem(int idNum, String str, int n){
setidNum(idNum);
setTitle(str);
setNumCopies(n);
}
public String toString(){
return "ID: " +idNum+ " Title: " +title+ " Number of Copies: " +numCopies;
}
public void print(){
System.out.println("Title: " +title);
System.out.println("ID: " +idNum);
System.out.println("Number of copies: " +numCopies);
}
public boolean equals(Object obj){
if(obj == null)
return false;
Item otherItem = (Item) obj;
return idNum == otherItem.idNum && title == otherItem.title && numCopies
== otherItem.numCopies;
}
public void addItem(){
numCopies++;
}
}

public class Book extends WrittenItem{
public Book(){
super();
}
public Book(int id, String str, int n){
super(id, str, n);
}
public boolean equals(Object obj){
if(obj == null)
return false;
Book otherBook = (Book) obj;
return super.equals(otherBook);
}
public String toString(){
return super.toString();
}
public int getIdNum(){
return super.getIdNum();
}
public String getTitle(){
return super.getTitle();
}
public int getNumCopies(){
return super.getNumCopies();
}
public String getAuthor(){
return super.getAuthor();
}
public void print(){
System.out.println("Display info about a book: ");
super.print();
}
public void checkIn(){
super.checkIn();
}
public void checkOut(){
super.checkOut();
}
public void addItem(){
super.addItem();
}
}

class JournalPaper extends WrittenItem{
private int pubYear;
JournalPaper(){
super();

}
public JournalPaper(int idNum, String str, int n, String author, int y){
super(idNum, str, n,author,y);
pubYear=y;
}
public String toString(){
return super.toString()+" Year published: "+ pubYear;
}
public int getIdNum(){
return super.getIdNum();
}
public String title(){
return super.getTitle();
}
public int numCopies(){
return super.getNumCopies();
}
public String getAuthor(){
return super.getAuthor();
}
public int yearPub(){
return yearPub;
}
public void print(){
super.print();
System.out.println("Year published: "+ pubYear);
}
public void checkIn(){

}
public void checkOut(){

}
public void addItem(){
super.addItem();
}
}

abstract class MediaItem{
private int runTime;
class Video extends MediaItem{
private String directior;
private String genre;
private int year;
}
class CD extends MediaItem{
private String artist;
private String genre;
}
public boolean equals(Object obj){
if(obj == null)
return false;
MediaItem otherMediaItem = (MediaItem) obj;
return super.equals(otherMediaItem) && runTime == otherMediaItem.runTime;
}
}

abstract class WrittenItem extends Item{
private String author;
void setAuthor(String str){
author = str;
}
String getAuthor(){
return author;
}
public int getidNum(){
return super.getidNum();
}
public String getTitle(){
return super.getTitle();
}
public int getNumCopies(){
return super.getCopies();
}
public boolean equals(Object obj){
if(obj == null)
return false;
WrittenItem otherWrittenItem = (WrittenItem) obj;
return super.equals(otherWrittenItem) && author == otherWrittenItem.author;
}
}
